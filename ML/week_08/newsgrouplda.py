# -*- coding: utf-8 -*-
"""NewsgroupLDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UAS7S41jLeAXAh8JdjAWGFeBLOzsECHW
"""

#import Natural Language Tool Kit in order to remove "stop words", such as "the", "an", etc.
import nltk
nltk.download('stopwords')

import re
import numpy as np
import pandas as pd
from pprint import pprint

#gensim
import gensim
import gensim.corpora as corpora
from gensim.utils import simple_preprocess
from gensim.models import CoherenceModel

#spacy for lemmatization
import spacy

import warnings
warnings.filterwarnings("ignore",category=DeprecationWarning)

#NLTK Stop words
from nltk.corpus import stopwords
stop_words = stopwords.words('english')
stop_words.extend(['from', 'subject', 're', 'edu', 'use'])

#import newsgroup Dataset
df = pd.read_json('https://raw.githubusercontent.com/selva86/datasets/master/newsgroups.json')
print(df.target_names.unique())
df.head()

#convert data into a list
data = df.content.values.tolist()

#remove emails from the dataset
data = [re.sub('\S*@\S*\s?', '', sent) for sent in data]

#remove new line characters
data = [re.sub('\s+', ' ', sent) for sent in data]

#remove distracting single quotes
data = [re.sub("\'", "", sent) for sent in data]

pprint(data[:1])

#convert sentences to words, removing punctuation using deacc=True
def sent_to_words(sentences):
    for sentence in sentences:
        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  # deacc=True removes punctuations

data_words = list(sent_to_words(data))

print(data_words[:1])

#build bigram and trigram models
bigram = gensim.models.Phrases(data_words, min_count=5, threshold=100)
trigram = gensim.models.Phrases(bigram[data_words], threshold=100)  

#faster way to get a sentence clubbed as a trigram/bigram
bigram_mod = gensim.models.phrases.Phraser(bigram)
trigram_mod = gensim.models.phrases.Phraser(trigram)

# See trigram example
print(trigram_mod[bigram_mod[data_words[0]]])

#define functions for stopwords, bigrams, trigrams and lemmatization
def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]

def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]

def make_trigrams(texts):
    return [trigram_mod[bigram_mod[doc]] for doc in texts]

def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):
    """https://spacy.io/api/annotation"""
    texts_out = []
    for sent in texts:
        doc = nlp(" ".join(sent)) 
        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])
    return texts_out

#implement the above functions:

#remove Stop Words
data_words_nostops = remove_stopwords(data_words)

#create Bigrams
data_words_bigrams = make_bigrams(data_words_nostops)

#initialize spacy 'en' model, keeping only tagger component (for efficiency)
nlp = spacy.load('en', disable=['parser', 'ner'])

#do lemmatization keeping only noun, adj, vb, adv
data_lemmatized = lemmatization(data_words_bigrams, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])

print(data_lemmatized[:1])

#create Dictionary
id2word = corpora.Dictionary(data_lemmatized)

#create Corpus
texts = data_lemmatized

#term Document Frequency
corpus = [id2word.doc2bow(text) for text in texts]

print(corpus[:1])

#print corpus so you can see which word is associated with an id, and therefore you can see the word's frequency
[[(id2word[id], freq) for id, freq in cp] for cp in corpus[:1]]

#build LDA model
lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=20, 
                                           random_state=100,
                                           update_every=1,
                                           chunksize=100,
                                           passes=10,
                                           alpha='auto',
                                           per_word_topics=True)

#finally - view the topics in the LDA model
pprint(lda_model.print_topics())
doc_lda = lda_model[corpus]