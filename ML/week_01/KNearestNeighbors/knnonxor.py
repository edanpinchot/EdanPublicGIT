# -*- coding: utf-8 -*-
"""KNNonXOR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lsuechbg2O24zCIrBtTgL0xhP00KVmVq
"""

import numpy as np
import matplotlib.pyplot as plt
from math import sqrt

"""Generate x and y coordinates for the graph:"""

x1 =np.concatenate([np.random.uniform(0, 100, 100), np.random.uniform(-100, 0, 100)])
y1 =np.concatenate([np.random.uniform(-100, 0, 100), np.random.uniform(0, 100, 100)])

x2 =np.concatenate([np.random.uniform(0, 100, 100), np.random.uniform(-100, 0, 100)])
y2 =np.concatenate([np.random.uniform(0, 100, 100), np.random.uniform(-100, 0, 100)])

"""Plot the noisy XOR graph:"""

plt.scatter(x1, y1, c='red')
plt.scatter(x2, y2, c='orange')
plt.show()

"""Combine x and y coordinates into a single dataset called "c":"""

a = (np.column_stack((x1, y1)))
b = (np.column_stack((x2, y2)))
c = np.concatenate((a,b), 0)

"""Method to calculate the Euclidean Distance between two rows:"""

def euclidean_distance(row1, row2):
  distance = 0.0

  for i in range(len(row1) - 1):
    distance += (row1[i] - row2[i])**2

  return sqrt(distance)

"""Given "test_row", calculate its distance to each datapoint in the dataset, then return a list of the k closest points:"""

def get_neighbors(dataset, test_row, k):
	distanceList = list()
 
	for dataset_row in dataset:
		distance = euclidean_distance(test_row, dataset_row)
		distanceList.append((dataset_row, distance))
  
	distanceList.sort(key=lambda tup: tup[1])
 
	neighbors = list()
	for i in range(k):
		neighbors.append(distanceList[i][0])
  
	return neighbors

"""Test the code using our dataset "c":"""

print('Test point:\n', c[0], '\n')

print('K Nearest Neighbors:')
neighbors = get_neighbors(c, c[0], 5)
for neighbor in neighbors:
	print(neighbor)