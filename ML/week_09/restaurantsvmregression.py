# -*- coding: utf-8 -*-
"""RestaurantSVMRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W-HRrahKqZMHP6Ya2cjcEQGbkaL_O7yg
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import r2_score,mean_squared_error
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

import io

train = pd.read_csv(io.BytesIO(uploaded['train.csv']))

#train_x = pd.DataFrame(train)
#train_y = train_x.pop("revenue")

from sklearn.model_selection import train_test_split
trainingDataX = pd.DataFrame(train)
trainingDataY = trainingDataX.pop('revenue')
train_x, test_x, train_y, test_y = train_test_split(trainingDataX, trainingDataY, test_size=0.3, random_state=1)

train_x[["day", "month", "year"]] = train_x["Open Date"].str.split("/", expand = True)
train_x.drop('Open Date', inplace=True, axis=1)

test_x[["day", "month", "year"]] = test_x["Open Date"].str.split("/", expand = True)
test_x.drop('Open Date', inplace=True, axis=1)

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
label_encoder = LabelEncoder()
print(train_x)
cityGroupEncoded = label_encoder.fit_transform(train_x["City Group"])
typeEncoded = label_encoder.fit_transform(train_x["Type"])
cityEncoded = label_encoder.fit_transform(train_x["City"])
train_x["City Group"] = cityGroupEncoded
train_x["Type"] = typeEncoded
train_x["City"] = cityEncoded

cityGroupEncoded2 = label_encoder.fit_transform(test_x["City Group"])
typeEncoded2 = label_encoder.fit_transform(test_x["Type"])
cityEncoded2 = label_encoder.fit_transform(test_x["City"])
test_x["City Group"] = cityGroupEncoded2
test_x["Type"] = typeEncoded2
test_x["City"] = cityEncoded2

SupportVectorRegModel = SVR()
SupportVectorRegModel.fit(train_x, train_y)

pred_y = SupportVectorRegModel.predict(test_x)
SupportVectorRegModel.score(test_x, test_y)

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
print("MAE =", mean_absolute_error(test_y, pred_y))
print("MSE =", mean_squared_error(test_y, pred_y, squared=True))
print("RMSE =", mean_squared_error(test_y, pred_y, squared=False))

