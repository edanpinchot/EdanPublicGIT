# -*- coding: utf-8 -*-
"""BostonL1Regularization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nNNNsATnO43FrEfGAjkWIxP7j0-m6F8o
"""

# Commented out IPython magic to ensure Python compatibility.
#import dependencies
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn
from statistics import mean
from sklearn import linear_model
from sklearn.model_selection import train_test_split, cross_val_score
# %matplotlib inline

from sklearn.datasets import load_boston
boston = load_boston()

#transform the dataset into a dataframe
df_x = pd.DataFrame(boston.data, columns = boston.feature_names)
df_y = pd.DataFrame(boston.target)

df_x.describe()

#initialize the linear regression model
reg = linear_model.LinearRegression()

#split data into 60% training and 30% testing data
x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size = 0.30, random_state = 0)

#train the model with training data
reg.fit(x_train, y_train)

#print predictions on the test data
y_pred = reg.predict(x_test)
ActualVsPred = np.column_stack((y_pred, y_test))
df = pd.DataFrame(data = ActualVsPred)
print(df)

#again, check the model accuracy using Mean Squared Error in sklearn
from sklearn.metrics import mean_squared_error
print( mean_squared_error(y_test, y_pred) )

plt.scatter(y_test, y_pred, s=5 )
plt.xlabel( "Prices")
plt.ylabel( "Predicted Prices")

seaborn.regplot(y_test, y_pred, ci=None)

reg.score(x_train, y_train)

reg.score(x_test, y_test)

lasso_reg = linear_model.Lasso(alpha=0.5, tol=0.1)
lasso_reg.fit(x_train, y_train)

#print predictions on the test data
y_pred2 = lasso_reg.predict(x_test)
ActualVsPred2 = np.column_stack((y_pred2, y_test))
df2 = pd.DataFrame(data = ActualVsPred2)
print(df2)

#now plot based on our new predictions with Lasso Regularization
plt.scatter(y_test, y_pred2, s=5)
plt.xlabel( "Prices")
plt.ylabel( "Predicted Prices")
seaborn.regplot(y_test, y_pred2, ci=None)

lasso_reg.score(x_test, y_test)

lasso_reg.score(x_train, y_train)